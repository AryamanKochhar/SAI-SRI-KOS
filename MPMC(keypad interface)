ORG 000H
SJMP START

ORG 0030H

START: MOV P0, #0FFH  ; MAKE P0 AN INPUT PORT

ACALL LCD_INITIALIZE

K1: MOV P1, #0        ; GROUND ALL ROWS AT ONCE
MOV A, P0             ; READ ALL COL.
ANL A, #00001111B     ; MASK UNUSED BITS
CJNE A, #00001111B, K1 ; CHECK ALL KEYS RELEASED

K2: ACALL DELAY        ; CALL 20 MS DELAY
MOV A, P0             ; SEE IF ANY KEY IS PRESSED
ANL A, #00001111B     ; MASK UNUSED BITS
CJNE A, #00001111B, OVER ; KEY PRESSED, WAIT
SJMP K2              ; CHECK TILL KEY PRESSED

OVER: ACALL DELAY     ; WAIT 20 ms KEY DEBOUNCE TIME

MOV A, P0            ; CHECK KEY CLOSURE
ANL A, #00001111B    ; MASK UNUSED BITS
CJNE A, #00001111B, OVER1 ; KEY PRESSED, FIND ROW
SJMP K2             ; IF NONE, KEEP POLLING

OVER1: MOV P1, #11111110B ; GROUND ROW 0

MOV A, P0             ; READ ALL COLUMNS
ANL A, #00001111B    ; MASK UNUSED BITS
CJNE A, #00001111B, ROW_0 ; ROW0, FIND COL

MOV P1, #11111101B   ; GROUND ROW 1
MOV A, P0            ; READ ALL COL.
ANL A, #00001111B    ; MASK UNUSED BITS
CJNE A, #00001111B, ROW_1 ; ROW 1, FIND THE COL

MOV P1, #11111011B   ; GROUND ROW 2
MOV A, P0            ; READ ALL COL.
ANL A, #00001111B    ; MASK UNUSED BITS
CJNE A, #00001111B, ROW_2 ; ROW 2, FIND COL

MOV P1, #11110111B   ; GROUND ROW 3
MOV A, P0            ; READ ALL COL.
ANL A, #00001111B    ; MASK UNUSED BITS
CJNE A, #00001111B, ROW_3 ; ROW 3, FIND COL

LJMP K2              ; IF NONE, FALSE INPUT, REPEAT

ROW_0: MOV DPTR, #KCODE0 ; SET DPTR = START OF ROW 0
SJMP FIND             ; FIND COLUMN BELONGS TO

ROW_1: MOV DPTR, #KCODE1 ; SET DPTR = START OF ROW 1
SJMP FIND             ; FIND COLUMN BELONGS TO

ROW_2: MOV DPTR, #KCODE2 ; SET DPTR = START OF ROW 2
SJMP FIND             ; FIND COLUMN BELONGS TO

ROW_3: MOV DPTR, #KCODE3 ; SET DPTR = START OF ROW 3

FIND: RRC A           ; SEE IF ANY CY BIT LOW
JNC MATCH            ; IF ZERO, GET ASCII CODE
INC DPTR             ; POINT TO NEXT COLUMN
SJMP FIND            ; KEEP SEARCHING

MATCH: CLR A
MOVC A, @A+DPTR      ; GET CODE FROM LOOK-UP TABLE
ACALL LCD_DATA       ; DISPLAY CODE

LJMP K1              ; LOOP

DELAY: MOV R4, #40
REPEAT: MOV R5, #230
REPEATT: DJNZ R5, REPEATT
DJNZ R4, REPEAT
RET

ORG 300H
KCODE3: DB 'C', 'D', 'E', 'F' ; ROW 3
KCODE2: DB '8', '9', 'A', 'B' ; ROW 2
KCODE1: DB '4', '5', '6', '7' ; ROW 1
KCODE0: DB '0', '1', '2', '3' ; ROW 0
	
LCD_INITIALIZE: MOV A, #38H
ACALL LCD_COMMAND
MOV A, #0EH
ACALL LCD_COMMAND
MOV A, #01H
ACALL LCD_COMMAND
MOV A, #06H
ACALL LCD_COMMAND
MOV A, #80H
ACALL LCD_COMMAND
RET

LCD_COMMAND: MOV P2, A
CLR P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET

LCD_DATA: MOV P2, A
SETB P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET
END


