keypad 1
ORG 0000H
SJMP START

ORG 0030H
START: MOV P0, #0FFH
ACALL LCD_INIT

K1: MOV P1, #0
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, K2
SJMP K1
K2: ACALL DELAY
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, OVER
SJMP K2

OVER: ACALL DELAY
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, OVER1
SJMP K2

OVER1: MOV P1, #11111110B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_0
MOV P1, #11111101B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_1
MOV P1, #11111011B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_2
MOV P1, #11110111B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_3
LJMP K1

ROW_0: MOV DPTR, #KCODE0
SJMP FIND
ROW_1: MOV DPTR, #KCODE1
SJMP FIND
ROW_2: MOV DPTR, #KCODE2
SJMP FIND
ROW_3: MOV DPTR, #KCODE3
SJMP FIND

FIND: RRC A
JNC MATCH
INC DPTR
SJMP FIND

MATCH: CLR A
MOVC A, @A + DPTR
ACALL LCD_DATA
LJMP K1

DELAY: MOV R4, #40
HERE: MOV R5, #230
HERE1: DJNZ R5, HERE1
DJNZ R4, HERE
RET

ORG 300H
KCODE3: DB 'C', 'D', 'E', 'F'
KCODE2: DB '8', '9', 'A', 'B'
KCODE1: DB '4', '5', '6', '7'
KCODE0: DB '0', '1', '2', '3'

LCD_INIT: MOV A, #38H
ACALL LCD_COMD
MOV A, #0EH
ACALL LCD_COMD
MOV A, #01H
ACALL LCD_COMD
MOV A, #06H
ACALL LCD_COMD
MOV A, #80H
ACALL LCD_COMD
RET

LCD_COMD:
MOV P2,A
CLR P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET

LCD_DATA:
MOV P2, A
SETB P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET

END




keypad 2

ORG 0300H
ROW0: DB '0','1','2','3'
ROW1: DB '4','5','6','7'
ROW2: DB '8','9','A','B'
ROW3: DB 'C','D','E','F'


ORG 0030H
MOV P0, #0FFH
ACALL LCD_INITIALISE

L1: MOV P1, #00H
MOV A, P1
ANL A, #00001111B
CJNE A, #00001111B, L1
ACALL DELAY

L2: MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, L3
SJMP L2
ACALL DELAY

L3: MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, L4
SJMP L2
ACALL DELAY

L4: MOV P1, #11111110B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_0
MOV P1, #11111101B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_1
MOV P1, #11111011B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_2
MOV P1, #11110111B
MOV A, P0
ANL A, #00001111B
CJNE A, #00001111B, ROW_3
LJMP L2

ROW_0: MOV DPTR, #ROW0
       SJMP L6
ROW_1: MOV DPTR, #ROW1
       SJMP L6
ROW_2: MOV DPTR, #ROW2
       SJMP L6
ROW_3: MOV DPTR, #ROW3
       SJMP L6

L6: RRC A
    JNC L7
    INC DPTR
    SJMP L6

L7: CLR A
    MOVC A, @A+DPTR
    ACALL DATA_SUB
    LJMP L2

LCD_INITIALISE:
MOV A, #38H
ACALL COMM_SUB
ACALL DELAY
MOV A, #01H
ACALL COMM_SUB
ACALL DELAY
MOV A, #0EH
ACALL COMM_SUB
ACALL DELAY
MOV A, #06H
ACALL COMM_SUB
ACALL DELAY
MOV A, #80H
ACALL COMM_SUB
ACALL DELAY
RET

COMM_SUB:
MOV P2, A
CLR P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET

DATA_SUB:
MOV P2, A
SETB P3.7
CLR P3.6
SETB P3.5
ACALL DELAY
CLR P3.5
RET

DELAY: MOV R0, #0FFH
HERE: DJNZ R0, HERE
RET

END


-----------------------------------------------------------------------------------------------------------

dac sine wave

AGAIN:
    MOV DPTR, #TABLE        ; Initialize DPTR to point to TABLE
    MOV R2, #9H          ; Load R2 with the number of bytes in the TABLE
BACK:
    CLR A                   ; Clear accumulator
    MOVC A, @A + DPTR       ; Fetch data from code memory (TABLE)
    MOV P1, A               ; Output data to Port 1
    INC DPTR                ; Move DPTR to the next byte
    DJNZ R2, BACK           ; Decrement R2, repeat until R2 = 0
    SJMP AGAIN              ; Start again from the beginning
    
ORG 300H                   ; Start the TABLE at address 300H
TABLE: 
    DB 128, 192, 238, 255, 238, 192, 128 ; Data for TABLE
    DB 64, 17, 0, 17, 64, 128
END



-----------------------------------------------------------------------------------------------------------

lcd interrupt

ORG 0000H
SJMP 0030H
ORG 0030H
MOV IE,#84H
SETB TCON.2
AGAIN: MOV DPTR,#MSG1
L1: CLR A
MOVC A,@A+DPTR
JZ DATAA
ACALL COM_SUB
ACALL DELAY
INC DPTR
SJMP L1
DATAA: MOV DPTR,#MSG2
L2: CLR A
MOVC A,@A+DPTR
JZ AGAIN
ACALL DATA_SUB
ACALL DELAY
INC DPTR
SJMP L2
COM_SUB: MOV P2,A
CLR P3.7
CLR P3.6
CLR P3.5
SETB P3.5
ACALL DELAY
CLR P3.5
ACALL DELAY
CLR P3.5
RET
DATA_SUB: MOV P2,A
SETB P3.7
CLR P3.6
SETB P3.5
RET
DELAY: MOV R0,#0FFH
L4: DJNZ R0,L4
RET

ORG 0013H
SJMP 0070H
ORG 0070H
MOV A,#01H
ACALL COM_SUB
ACALL DELAY
MOV DPTR,#MSG3

L3: CLR A
MOVC A,@A+DPTR
JZ EXIT
ACALL DATA_SUB
ACALL DELAY
INC DPTR
SJMP L3
EXIT: RETI

ORG 0300H
MSGI: DB 38H,01H,0EH,06H,80H,0
MSG2: DB”WAITING FOR INTERRUPT”,0
MSG3: DB”INTERRUPT HAS OCCURRED”,0
END

-----------------------------------------------------------------------------------------------------------

Serial Communicaiton

ORG 0300H
MESSAGE1: DB'SWITCH IS ON & LED IS ON',0
MESSAGE2: DB'SWITCH IS OFF & LED IS OFF',0

ORG 0000H
MOV TMOD,#20H
MOV TH1,#-3D
MOV SCON,#50H
AGAIN: SETB TR1
JB P1.0,LEDON
CLR P2.0
MOV DPTR,#MESSAGE 2
ACALL SERIAL
LEDON: SETB P2.0
MOV DPTR,#MESSAGE1
ACALL SERIAL
SJMP AGAIN
SERIAL:
L2: CLR A
MOVC A,@A+DPTR
JZ EXIT
MOV SBUF,A
HERE1:JNB TI,HERE1
CLR TI
INC DPTR
SJMP L2
EXIT: 


-----------------------------------------------------------------------------------------------------------
Port checking


-----------------------------------------------------------------------------------------------------------
